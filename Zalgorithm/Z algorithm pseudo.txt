Description:
Given a text 𝑇, the Z algorithm produces an array 𝑍 [1 … 𝑛] where 𝑍[𝑖] is the length of the largest substring that starts in 𝑇[𝑖] that is also a prefix of 𝑇.

Z(T,P)
S= P$T
l = S.length
Z = ArrayZ(S)
for i to l do:
	if Z[i] == P.length then:
		print: patter found on index: (i - P.length - 1)

ArrayZ(S)
n = S.length
Z = array [1...n]
l = r = k = 0
for i = 1 to n do:
	if i > r then:
		l = r = i
		while r < n and S[r-l] == S[r] do:
			r = r + 1
		Z[i] = r - l, r = r - 1
	else:
		k = i - l
		if Z[k] < r - i + 1 then:
			Z[i] = Z[k]
		else:
			l = i
			while r < n and S[r - l] == S[r] do:
				r = r + 1
			Z[i] = r - l, r = r - 1 
return Z